gcc -g huff.c
./a.out
Amp: 34/0
VLI: 0x8800/6
Amp: 34/6
RL/Size: 0/5 --> index 5, Val 20 -- > Amp: 20
RL/Size: 0/4 --> index 4, Val 10 -- > Amp: 10
RL/Size: 0/1 --> index 1, Val -1 -- > Amp: 0
RL/Size: 0/2 --> index 2, Val -3 -- > Amp: 0
RL/Size: 0/3 --> index 3, Val 5 -- > Amp: 5
RL/Size: 2/2 --> index 22, Val 2 -- > Amp: 2
RL/Size: 0/1 --> index 1, Val 1 -- > Amp: 1
RL/Size: 1/1 --> index 11, Val 1 -- > Amp: 1
151/+16 ZEROSRL/Size: 5/4 --> index 54, Val -12 -- > Amp: 3
RL/Size: 1/4 --> index 14, Val 8 -- > Amp: 8
RL/Size: 0/1 --> index 1, Val 1 -- > Amp: 1
RL/Size: 0/2 --> index 2, Val 2 -- > Amp: 2
RL/Size: 0/2 --> index 2, Val 3 -- > Amp: 3
RL/Size: 0/4 --> index 4, Val -10 -- > Amp: 5
RL/Size: 15/3 --> index 153, Val 6 -- > Amp: 6
RL/Size: 0/3 --> index 3, Val 7 -- > Amp: 7
RL/Size: 6/1 --> index 61, Val 1 -- > Amp: 1

Intermediate coding:
Table Index: 5 -> Encodes to [5 bits] 1a; 
Table Index: 4 -> Encodes to [4 bits] b; 
Table Index: 1 -> Encodes to [2 bits] 0; 
Table Index: 2 -> Encodes to [2 bits] 1; 
Table Index: 3 -> Encodes to [3 bits] 4; 
Table Index: 22 -> Encodes to [8 bits] f9; 
Table Index: 1 -> Encodes to [2 bits] 0; 
Table Index: 11 -> Encodes to [4 bits] c; 
Table Index: 151 -> Encodes to [11 bits] 7f9; 
Table Index: 54 -> Encodes to [16 bits] ff9f; 
Table Index: 14 -> Encodes to [9 bits] 1f6; 
Table Index: 1 -> Encodes to [2 bits] 0; 
Table Index: 2 -> Encodes to [2 bits] 1; 
Table Index: 2 -> Encodes to [2 bits] 1; 
Table Index: 4 -> Encodes to [4 bits] b; 
Table Index: 153 -> Encodes to [16 bits] fff6; 
Table Index: 3 -> Encodes to [3 bits] 4; 
Table Index: 61 -> Encodes to [7 bits] 7b; 
Table Index: 0 -> Encodes to [4 bits] a; 
eb75 4ba0 92fc c73f e7fe 7cfe d059 ed7f fdb4 fef4 Codeword: eb75Len/Size = 4/6
DC Amp: 2d
Raw word: d52eRL/Size = 0/5; [len:5] Amp: 20
[1] (0, 1) <- 20Raw word: ba09RL/Size = 0/4; [len:4] Amp: 10
[2] (1, 0) <- 10Raw word: 92fRL/Size = 0/1; [len:2] Amp: -1
[3] (0, 2) <- -1Raw word: 497eRL/Size = 0/2; [len:2] Amp: -3
[4] (1, 1) <- -3Raw word: 97e6RL/Size = 0/3; [len:3] Amp: 5
[5] (2, 0) <- 5Raw word: f98eRL/Size = 2/2; [len:8] Amp: 2
[8] (2, 1) <- 2Raw word: 39ffRL/Size = 0/1; [len:2] Amp: 1
[9] (3, 0) <- 1Raw word: cff9RL/Size = 1/1; [len:4] Amp: 1
[11] (1, 3) <- 1Raw word: ff3fRL/Size = 15/1; [len:11] Skipping amp!
[27] (6, 0) <- 0Raw word: ff9fRL/Size = 5/4; [len:16] Amp: -12
[33] (5, 2) <- -12Raw word: fb41RL/Size = 1/4; [len:9] Amp: 8
[35] (7, 0) <- 8Raw word: 2cf6RL/Size = 0/1; [len:2] Amp: 1
[36] (1, 7) <- 1Raw word: 67b5RL/Size = 0/2; [len:2] Amp: 2
[37] (2, 6) <- 2Raw word: 7b5fRL/Size = 0/2; [len:2] Amp: 3
[38] (3, 5) <- 3Raw word: b5ffRL/Size = 0/4; [len:4] Amp: -10
[39] (4, 4) <- -10Raw word: fff6RL/Size = 15/3; [len:16] Amp: 6
[55] (5, 6) <- 6Raw word: 9fdeRL/Size = 0/3; [len:3] Amp: 7
[56] (6, 5) <- 7Raw word: f7a0RL/Size = 6/1; [len:7] Amp: 1
[63] (7, 7) <- 1Raw word: a000
57 0 0 0 20 0 0 0 
-1 -1 -1 -1 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
10 0 0 0 -3 -1 -1 -1 
0 0 0 0 1 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 1 0 0 0 
RL/Size: 0/5 --> index 5, Val 20 -- > Amp: 20
RL/Size: 0/4 --> index 4, Val 10 -- > Amp: 10
RL/Size: 0/5 --> index 5, Val 30 -- > Amp: 30
RL/Size: 0/2 --> index 2, Val -3 -- > Amp: 0
RL/Size: 0/3 --> index 3, Val 5 -- > Amp: 5
RL/Size: 1/7 --> index 17, Val -120 -- > Amp: 7
RL/Size: 0/2 --> index 2, Val 2 -- > Amp: 2
RL/Size: 0/1 --> index 1, Val 1 -- > Amp: 1
RL/Size: 1/1 --> index 11, Val 1 -- > Amp: 1
RL/Size: 0/6 --> index 6, Val 44 -- > Amp: 44
RL/Size: 11/8 --> index 118, Val 140 -- > Amp: 140
RL/Size: 8/4 --> index 84, Val -12 -- > Amp: 3
RL/Size: 1/4 --> index 14, Val 8 -- > Amp: 8
RL/Size: 0/1 --> index 1, Val 1 -- > Amp: 1
RL/Size: 0/2 --> index 2, Val 2 -- > Amp: 2
RL/Size: 0/2 --> index 2, Val 3 -- > Amp: 3
RL/Size: 0/4 --> index 4, Val -10 -- > Amp: 5
RL/Size: 13/5 --> index 135, Val -30 -- > Amp: 1
RL/Size: 1/3 --> index 13, Val 6 -- > Amp: 6
RL/Size: 0/3 --> index 3, Val 7 -- > Amp: 7
RL/Size: 0/6 --> index 6, Val 40 -- > Amp: 40
RL/Size: 5/1 --> index 51, Val 1 -- > Amp: 1

Intermediate coding:
Table Index: 5 -> Encodes to [5 bits] 1a; 
Table Index: 4 -> Encodes to [4 bits] b; 
Table Index: 5 -> Encodes to [5 bits] 1a; 
Table Index: 2 -> Encodes to [2 bits] 1; 
Table Index: 3 -> Encodes to [3 bits] 4; 
Table Index: 17 -> Encodes to [16 bits] ff85; 
Table Index: 2 -> Encodes to [2 bits] 1; 
Table Index: 1 -> Encodes to [2 bits] 0; 
Table Index: 11 -> Encodes to [4 bits] c; 
Table Index: 6 -> Encodes to [7 bits] 78; 
Table Index: 118 -> Encodes to [16 bits] ffd6; 
Table Index: 84 -> Encodes to [16 bits] ffb7; 
Table Index: 14 -> Encodes to [9 bits] 1f6; 
Table Index: 1 -> Encodes to [2 bits] 0; 
Table Index: 2 -> Encodes to [2 bits] 1; 
Table Index: 2 -> Encodes to [2 bits] 1; 
Table Index: 4 -> Encodes to [4 bits] b; 
Table Index: 135 -> Encodes to [16 bits] ffe5; 
Table Index: 13 -> Encodes to [7 bits] 79; 
Table Index: 3 -> Encodes to [3 bits] 4; 
Table Index: 6 -> Encodes to [7 bits] 78; 
Table Index: 51 -> Encodes to [7 bits] 7a; 
Table Index: 0 -> Encodes to [4 bits] a; 
Codeword: d7d5Len/Size = 3/5
DC Amp: 17
Raw word: d52eRL/Size = 0/5; [len:5] Amp: 20
[1] (0, 1) <- 20Raw word: bad7RL/Size = 0/4; [len:4] Amp: 10
[2] (1, 0) <- 10Raw word: d792RL/Size = 0/5; [len:5] Amp: 30
[3] (0, 2) <- 30Raw word: 497fRL/Size = 0/2; [len:2] Amp: -3
[4] (1, 1) <- -3Raw word: 97feRL/Size = 0/3; [len:3] Amp: 5
[5] (2, 0) <- 5Raw word: ff85RL/Size = 1/7; [len:16] Amp: -120
[7] (1, 2) <- -120Raw word: 639fRL/Size = 0/2; [len:2] Amp: 2
[8] (2, 1) <- 2Raw word: 39f1RL/Size = 0/1; [len:2] Amp: 1
[9] (3, 0) <- 1Raw word: cf8bRL/Size = 1/1; [len:4] Amp: 1
[11] (1, 3) <- 1Raw word: f167RL/Size = 0/6; [len:7] Amp: 44
[12] (2, 2) <- 44Raw word: ffd6RL/Size = 11/8; [len:16] Amp: 140
[24] (3, 3) <- 140Raw word: ffb7RL/Size = 8/4; [len:16] Amp: -12
[33] (5, 2) <- -12Raw word: fb41RL/Size = 1/4; [len:9] Amp: 8
[35] (7, 0) <- 8Raw word: 2cf6RL/Size = 0/1; [len:2] Amp: 1
[36] (1, 7) <- 1Raw word: 67b5RL/Size = 0/2; [len:2] Amp: 2
[37] (2, 6) <- 2Raw word: 7b5fRL/Size = 0/2; [len:2] Amp: 3
[38] (3, 5) <- 3Raw word: b5ffRL/Size = 0/4; [len:4] Amp: -10
[39] (4, 4) <- -10Raw word: ffe5RL/Size = 13/5; [len:16] Amp: -30
[53] (7, 3) <- -30Raw word: f3a7RL/Size = 1/3; [len:7] Amp: 6
[55] (5, 6) <- 6Raw word: 9fc5RL/Size = 0/3; [len:3] Amp: 7
[56] (6, 5) <- 7Raw word: f147RL/Size = 0/6; [len:7] Amp: 40
[57] (7, 4) <- 40Raw word: f5a0RL/Size = 5/1; [len:7] Amp: 1
[63] (7, 7) <- 1Raw word: a000








RL/Size: 0/5 --> index 5, Val 20 -- > Amp: 20
RL/Size: 0/4 --> index 4, Val 10 -- > Amp: 10
RL/Size: 0/1 --> index 1, Val -1 -- > Amp: 0
RL/Size: 0/2 --> index 2, Val -3 -- > Amp: 0
RL/Size: 0/3 --> index 3, Val 5 -- > Amp: 5
RL/Size: 1/7 --> index 17, Val 99 -- > Amp: 99
RL/Size: 0/2 --> index 2, Val 2 -- > Amp: 2
RL/Size: 0/1 --> index 1, Val 1 -- > Amp: 1
RL/Size: 1/1 --> index 11, Val 1 -- > Amp: 1
RL/Size: 0/6 --> index 6, Val 33 -- > Amp: 33
RL/Size: 7/4 --> index 74, Val 8 -- > Amp: 8
RL/Size: 4/5 --> index 45, Val -31 -- > Amp: 0
RL/Size: 0/4 --> index 4, Val 8 -- > Amp: 8
RL/Size: 4/5 --> index 45, Val 30 -- > Amp: 30
RL/Size: 1/4 --> index 14, Val -12 -- > Amp: 3
RL/Size: 1/4 --> index 14, Val 8 -- > Amp: 8
RL/Size: 0/1 --> index 1, Val 1 -- > Amp: 1
RL/Size: 0/2 --> index 2, Val 2 -- > Amp: 2
RL/Size: 0/2 --> index 2, Val 3 -- > Amp: 3
RL/Size: 0/4 --> index 4, Val -10 -- > Amp: 5
RL/Size: 1/7 --> index 17, Val -64 -- > Amp: 63
RL/Size: 13/3 --> index 133, Val 6 -- > Amp: 6
RL/Size: 0/3 --> index 3, Val 7 -- > Amp: 7
RL/Size: 1/7 --> index 17, Val 100 -- > Amp: 100
RL/Size: 3/4 --> index 34, Val 12 -- > Amp: 12
RL/Size: 0/1 --> index 1, Val 1 -- > Amp: 1

Intermediate coding:
Table Index: 5 -> Encodes to [5 bits] 1a; 
Table Index: 4 -> Encodes to [4 bits] b; 
Table Index: 1 -> Encodes to [2 bits] 0; 
Table Index: 2 -> Encodes to [2 bits] 1; 
Table Index: 3 -> Encodes to [3 bits] 4; 
Table Index: 17 -> Encodes to [16 bits] ff85; 
Table Index: 2 -> Encodes to [2 bits] 1; 
Table Index: 1 -> Encodes to [2 bits] 0; 
Table Index: 11 -> Encodes to [4 bits] c; 
Table Index: 6 -> Encodes to [7 bits] 78; 
Table Index: 74 -> Encodes to [16 bits] ffaf; 
Table Index: 45 -> Encodes to [16 bits] ff98; 
Table Index: 4 -> Encodes to [4 bits] b; 
Table Index: 45 -> Encodes to [16 bits] ff98; 
Table Index: 14 -> Encodes to [9 bits] 1f6; 
Table Index: 14 -> Encodes to [9 bits] 1f6; 
Table Index: 1 -> Encodes to [2 bits] 0; 
Table Index: 2 -> Encodes to [2 bits] 1; 
Table Index: 2 -> Encodes to [2 bits] 1; 
Table Index: 4 -> Encodes to [4 bits] b; 
Table Index: 17 -> Encodes to [16 bits] ff85; 
Table Index: 133 -> Encodes to [16 bits] ffe3; 
Table Index: 3 -> Encodes to [3 bits] 4; 
Table Index: 17 -> Encodes to [16 bits] ff85; 
Table Index: 34 -> Encodes to [16 bits] ff8f; 
Table Index: 1 -> Encodes to [2 bits] 0; 
Table Index: 0 -> Encodes to [4 bits] a; 
Codeword: e7b5Len/Size = 4/6
DC Amp: ffffffdf
Raw word: d52eRL/Size = 0/5; [len:5] Amp: 20
[1] (0, 1) <- 20Raw word: ba09RL/Size = 0/4; [len:4] Amp: 10
[2] (1, 0) <- 10Raw word: 92fRL/Size = 0/1; [len:2] Amp: -1
[3] (0, 2) <- -1Raw word: 497fRL/Size = 0/2; [len:2] Amp: -3
[4] (1, 1) <- -3Raw word: 97feRL/Size = 0/3; [len:3] Amp: 5
[5] (2, 0) <- 5Raw word: ff85RL/Size = 1/7; [len:16] Amp: 99
[7] (1, 2) <- 99Raw word: 639fRL/Size = 0/2; [len:2] Amp: 2
[8] (2, 1) <- 2Raw word: 39f1RL/Size = 0/1; [len:2] Amp: 1
[9] (3, 0) <- 1Raw word: cf88RL/Size = 1/1; [len:4] Amp: 1
[11] (1, 3) <- 1Raw word: f10fRL/Size = 0/6; [len:7] Amp: 33
[12] (2, 2) <- 33Raw word: ffafRL/Size = 7/4; [len:16] Amp: 8
[20] (5, 0) <- 8Raw word: ff98RL/Size = 4/5; [len:16] Amp: -31
[25] (4, 2) <- -31Raw word: b8ffRL/Size = 0/4; [len:4] Amp: 8
[26] (5, 1) <- 8Raw word: ff98RL/Size = 4/5; [len:16] Amp: 30
[31] (3, 4) <- 30Raw word: fb1fRL/Size = 1/4; [len:9] Amp: -12
[33] (5, 2) <- -12Raw word: fb41RL/Size = 1/4; [len:9] Amp: 8
[35] (7, 0) <- 8Raw word: 2cf6RL/Size = 0/1; [len:2] Amp: 1
[36] (1, 7) <- 1Raw word: 67b5RL/Size = 0/2; [len:2] Amp: 2
[37] (2, 6) <- 2Raw word: 7b5fRL/Size = 0/2; [len:2] Amp: 3
[38] (3, 5) <- 3Raw word: b5ffRL/Size = 0/4; [len:4] Amp: -10
[39] (4, 4) <- -10Raw word: ff85RL/Size = 1/7; [len:16] Amp: -64
[41] (6, 2) <- -64Raw word: ffe3RL/Size = 13/3; [len:16] Amp: 6
[55] (5, 6) <- 6Raw word: 9ffeRL/Size = 0/3; [len:3] Amp: 7
[56] (6, 5) <- 7Raw word: ff85RL/Size = 1/7; [len:16] Amp: 100
[58] (5, 7) <- 100Raw word: ff8fRL/Size = 3/4; [len:16] Amp: 12
[62] (7, 6) <- 12Raw word: 3400RL/Size = 0/1; [len:2] Amp: 1
[63] (7, 7) <- 1Raw word: a000








RL/Size: 0/5 --> index 5, Val 20 -- > Amp: 20
RL/Size: 0/4 --> index 4, Val 10 -- > Amp: 10
RL/Size: 0/1 --> index 1, Val -1 -- > Amp: 0
RL/Size: 0/2 --> index 2, Val -3 -- > Amp: 0
RL/Size: 0/3 --> index 3, Val 5 -- > Amp: 5
RL/Size: 1/7 --> index 17, Val 99 -- > Amp: 99
RL/Size: 0/2 --> index 2, Val 2 -- > Amp: 2
RL/Size: 0/1 --> index 1, Val 1 -- > Amp: 1
RL/Size: 1/1 --> index 11, Val 1 -- > Amp: 1
RL/Size: 0/6 --> index 6, Val 33 -- > Amp: 33
RL/Size: 7/4 --> index 74, Val 8 -- > Amp: 8
RL/Size: 4/5 --> index 45, Val -31 -- > Amp: 0
RL/Size: 0/4 --> index 4, Val 8 -- > Amp: 8
RL/Size: 4/5 --> index 45, Val 30 -- > Amp: 30
RL/Size: 1/4 --> index 14, Val -12 -- > Amp: 3
RL/Size: 1/4 --> index 14, Val 8 -- > Amp: 8
RL/Size: 0/1 --> index 1, Val 1 -- > Amp: 1
RL/Size: 0/2 --> index 2, Val 2 -- > Amp: 2
RL/Size: 0/2 --> index 2, Val 3 -- > Amp: 3
RL/Size: 0/4 --> index 4, Val -10 -- > Amp: 5
RL/Size: 1/7 --> index 17, Val -64 -- > Amp: 63
RL/Size: 13/3 --> index 133, Val 6 -- > Amp: 6
RL/Size: 0/3 --> index 3, Val 7 -- > Amp: 7
RL/Size: 1/7 --> index 17, Val 100 -- > Amp: 100
RL/Size: 3/4 --> index 34, Val 12 -- > Amp: 12
RL/Size: 0/1 --> index 1, Val 1 -- > Amp: 1

Intermediate coding:
Table Index: 5 -> Encodes to [5 bits] 1a; 
Table Index: 4 -> Encodes to [4 bits] b; 
Table Index: 1 -> Encodes to [2 bits] 0; 
Table Index: 2 -> Encodes to [2 bits] 1; 
Table Index: 3 -> Encodes to [3 bits] 4; 
Table Index: 17 -> Encodes to [16 bits] ff85; 
Table Index: 2 -> Encodes to [2 bits] 1; 
Table Index: 1 -> Encodes to [2 bits] 0; 
Table Index: 11 -> Encodes to [4 bits] c; 
Table Index: 6 -> Encodes to [7 bits] 78; 
Table Index: 74 -> Encodes to [16 bits] ffaf; 
Table Index: 45 -> Encodes to [16 bits] ff98; 
Table Index: 4 -> Encodes to [4 bits] b; 
Table Index: 45 -> Encodes to [16 bits] ff98; 
Table Index: 14 -> Encodes to [9 bits] 1f6; 
Table Index: 14 -> Encodes to [9 bits] 1f6; 
Table Index: 1 -> Encodes to [2 bits] 0; 
Table Index: 2 -> Encodes to [2 bits] 1; 
Table Index: 2 -> Encodes to [2 bits] 1; 
Table Index: 4 -> Encodes to [4 bits] b; 
Table Index: 17 -> Encodes to [16 bits] ff85; 
Table Index: 133 -> Encodes to [16 bits] ffe3; 
Table Index: 3 -> Encodes to [3 bits] 4; 
Table Index: 17 -> Encodes to [16 bits] ff85; 
Table Index: 34 -> Encodes to [16 bits] ff8f; 
Table Index: 1 -> Encodes to [2 bits] 0; 
Table Index: 0 -> Encodes to [4 bits] a; 
Codeword: e7b5Len/Size = 4/6
DC Amp: ffffffdf
Raw word: d52eRL/Size = 0/5; [len:5] Amp: 20
[1] (0, 1) <- 20Raw word: ba09RL/Size = 0/4; [len:4] Amp: 10
[2] (1, 0) <- 10Raw word: 92fRL/Size = 0/1; [len:2] Amp: -1
[3] (0, 2) <- -1Raw word: 497fRL/Size = 0/2; [len:2] Amp: -3
[4] (1, 1) <- -3Raw word: 97feRL/Size = 0/3; [len:3] Amp: 5
[5] (2, 0) <- 5Raw word: ff85RL/Size = 1/7; [len:16] Amp: 99
[7] (1, 2) <- 99Raw word: 639fRL/Size = 0/2; [len:2] Amp: 2
[8] (2, 1) <- 2Raw word: 39f1RL/Size = 0/1; [len:2] Amp: 1
[9] (3, 0) <- 1Raw word: cf88RL/Size = 1/1; [len:4] Amp: 1
[11] (1, 3) <- 1Raw word: f10fRL/Size = 0/6; [len:7] Amp: 33
[12] (2, 2) <- 33Raw word: ffafRL/Size = 7/4; [len:16] Amp: 8
[20] (5, 0) <- 8Raw word: ff98RL/Size = 4/5; [len:16] Amp: -31
[25] (4, 2) <- -31Raw word: b8ffRL/Size = 0/4; [len:4] Amp: 8
[26] (5, 1) <- 8Raw word: ff98RL/Size = 4/5; [len:16] Amp: 30
[31] (3, 4) <- 30Raw word: fb1fRL/Size = 1/4; [len:9] Amp: -12
[33] (5, 2) <- -12Raw word: fb41RL/Size = 1/4; [len:9] Amp: 8
[35] (7, 0) <- 8Raw word: 2cf6RL/Size = 0/1; [len:2] Amp: 1
[36] (1, 7) <- 1Raw word: 67b5RL/Size = 0/2; [len:2] Amp: 2
[37] (2, 6) <- 2Raw word: 7b5fRL/Size = 0/2; [len:2] Amp: 3
[38] (3, 5) <- 3Raw word: b5ffRL/Size = 0/4; [len:4] Amp: -10
[39] (4, 4) <- -10Raw word: ff85RL/Size = 1/7; [len:16] Amp: -64
[41] (6, 2) <- -64Raw word: ffe3RL/Size = 13/3; [len:16] Amp: 6
[55] (5, 6) <- 6Raw word: 9ffeRL/Size = 0/3; [len:3] Amp: 7
[56] (6, 5) <- 7Raw word: ff85RL/Size = 1/7; [len:16] Amp: 100
[58] (5, 7) <- 100Raw word: ff8fRL/Size = 3/4; [len:16] Amp: 12
[62] (7, 6) <- 12Raw word: 3400RL/Size = 0/1; [len:2] Amp: 1
[63] (7, 7) <- 1Raw word: a000








RL/Size: 0/9 --> index 9, Val 320 -- > Amp: 320
RL/Size: 0/4 --> index 4, Val 10 -- > Amp: 10
RL/Size: 0/1 --> index 1, Val -1 -- > Amp: 0
RL/Size: 0/2 --> index 2, Val -3 -- > Amp: 0
RL/Size: 0/3 --> index 3, Val 5 -- > Amp: 5
RL/Size: 1/10 --> index 20, Val 799 -- > Amp: 799
RL/Size: 0/10 --> index 10, Val 1023 -- > Amp: 1023
RL/Size: 0/1 --> index 1, Val 1 -- > Amp: 1
RL/Size: 1/1 --> index 11, Val 1 -- > Amp: 1
RL/Size: 0/9 --> index 9, Val 333 -- > Amp: 333
RL/Size: 2/10 --> index 30, Val -585 -- > Amp: 438
RL/Size: 2/5 --> index 25, Val 20 -- > Amp: 20
RL/Size: 1/4 --> index 14, Val 8 -- > Amp: 8
RL/Size: 4/5 --> index 45, Val -31 -- > Amp: 0
RL/Size: 0/4 --> index 4, Val 8 -- > Amp: 8
RL/Size: 4/5 --> index 45, Val 30 -- > Amp: 30
RL/Size: 1/4 --> index 14, Val -12 -- > Amp: 3
RL/Size: 1/4 --> index 14, Val 8 -- > Amp: 8
RL/Size: 0/1 --> index 1, Val 1 -- > Amp: 1
RL/Size: 0/2 --> index 2, Val 2 -- > Amp: 2
RL/Size: 0/2 --> index 2, Val 3 -- > Amp: 3
RL/Size: 0/10 --> index 10, Val -810 -- > Amp: 213
RL/Size: 1/7 --> index 17, Val -64 -- > Amp: 63
RL/Size: 3/9 --> index 39, Val 358 -- > Amp: 358
RL/Size: 3/9 --> index 39, Val 325 -- > Amp: 325
RL/Size: 5/3 --> index 53, Val 6 -- > Amp: 6
RL/Size: 0/3 --> index 3, Val 7 -- > Amp: 7
RL/Size: 1/7 --> index 17, Val 100 -- > Amp: 100
RL/Size: 3/4 --> index 34, Val 12 -- > Amp: 12
RL/Size: 0/1 --> index 1, Val 1 -- > Amp: 1

Intermediate coding:
Table Index: 9 -> Encodes to [16 bits] ff82; 
Table Index: 4 -> Encodes to [4 bits] b; 
Table Index: 1 -> Encodes to [2 bits] 0; 
Table Index: 2 -> Encodes to [2 bits] 1; 
Table Index: 3 -> Encodes to [3 bits] 4; 
Table Index: 20 -> Encodes to [16 bits] ff88; 
Table Index: 10 -> Encodes to [16 bits] ff83; 
Table Index: 1 -> Encodes to [2 bits] 0; 
Table Index: 11 -> Encodes to [4 bits] c; 
Table Index: 9 -> Encodes to [16 bits] ff82; 
Table Index: 30 -> Encodes to [16 bits] ff8e; 
Table Index: 25 -> Encodes to [16 bits] ff89; 
Table Index: 14 -> Encodes to [9 bits] 1f6; 
Table Index: 45 -> Encodes to [16 bits] ff98; 
Table Index: 4 -> Encodes to [4 bits] b; 
Table Index: 45 -> Encodes to [16 bits] ff98; 
Table Index: 14 -> Encodes to [9 bits] 1f6; 
Table Index: 14 -> Encodes to [9 bits] 1f6; 
Table Index: 1 -> Encodes to [2 bits] 0; 
Table Index: 2 -> Encodes to [2 bits] 1; 
Table Index: 2 -> Encodes to [2 bits] 1; 
Table Index: 10 -> Encodes to [16 bits] ff83; 
Table Index: 17 -> Encodes to [16 bits] ff85; 
Table Index: 39 -> Encodes to [16 bits] ff94; 
Table Index: 39 -> Encodes to [16 bits] ff94; 
Table Index: 53 -> Encodes to [16 bits] ff9e; 
Table Index: 3 -> Encodes to [3 bits] 4; 
Table Index: 17 -> Encodes to [16 bits] ff85; 
Table Index: 34 -> Encodes to [16 bits] ff8f; 
Table Index: 1 -> Encodes to [2 bits] 0; 
Table Index: 0 -> Encodes to [4 bits] a; 
Codeword: e7bfLen/Size = 4/6
DC Amp: ffffffdf
Raw word: ff82RL/Size = 0/9; [len:16] Amp: 320
[1] (0, 1) <- 320Raw word: ba09RL/Size = 0/4; [len:4] Amp: 10
[2] (1, 0) <- 10Raw word: 92fRL/Size = 0/1; [len:2] Amp: -1
[3] (0, 2) <- -1Raw word: 497fRL/Size = 0/2; [len:2] Amp: -3
[4] (1, 1) <- -3Raw word: 97feRL/Size = 0/3; [len:3] Amp: 5
[5] (2, 0) <- 5Raw word: ff88RL/Size = 1/10; [len:16] Amp: 799
[7] (1, 2) <- 799Raw word: ff83RL/Size = 0/10; [len:16] Amp: 1023
[8] (2, 1) <- 1023Raw word: 39ffRL/Size = 0/1; [len:2] Amp: 1
[9] (3, 0) <- 1Raw word: cffcRL/Size = 1/1; [len:4] Amp: 1
[11] (1, 3) <- 1Raw word: ff82RL/Size = 0/9; [len:16] Amp: 333
[12] (2, 2) <- 333Raw word: ff8eRL/Size = 2/10; [len:16] Amp: -585
[15] (0, 5) <- -585Raw word: ff89RL/Size = 2/5; [len:16] Amp: 20
[18] (3, 2) <- 20Raw word: fb47RL/Size = 1/4; [len:9] Amp: 8
[20] (5, 0) <- 8Raw word: ff98RL/Size = 4/5; [len:16] Amp: -31
[25] (4, 2) <- -31Raw word: b8ffRL/Size = 0/4; [len:4] Amp: 8
[26] (5, 1) <- 8Raw word: ff98RL/Size = 4/5; [len:16] Amp: 30
[31] (3, 4) <- 30Raw word: fb1fRL/Size = 1/4; [len:9] Amp: -12
[33] (5, 2) <- -12Raw word: fb41RL/Size = 1/4; [len:9] Amp: 8
[35] (7, 0) <- 8Raw word: 2cffRL/Size = 0/1; [len:2] Amp: 1
[36] (1, 7) <- 1Raw word: 67ffRL/Size = 0/2; [len:2] Amp: 2
[37] (2, 6) <- 2Raw word: 7ff8RL/Size = 0/2; [len:2] Amp: 3
[38] (3, 5) <- 3Raw word: ff83RL/Size = 0/10; [len:16] Amp: -810
[39] (4, 4) <- -810Raw word: ff85RL/Size = 1/7; [len:16] Amp: -64
[41] (6, 2) <- -64Raw word: ff94RL/Size = 3/9; [len:16] Amp: 358
[45] (4, 5) <- 358Raw word: ff94RL/Size = 3/9; [len:16] Amp: 325
[49] (3, 7) <- 325Raw word: ff9eRL/Size = 5/3; [len:16] Amp: 6
[55] (5, 6) <- 6Raw word: 9ffeRL/Size = 0/3; [len:3] Amp: 7
[56] (6, 5) <- 7Raw word: ff85RL/Size = 1/7; [len:16] Amp: 100
[58] (5, 7) <- 100Raw word: ff8fRL/Size = 3/4; [len:16] Amp: 12
[62] (7, 6) <- 12Raw word: 3400RL/Size = 0/1; [len:2] Amp: 1
[63] (7, 7) <- 1Raw word: a000









Intermediate coding:
Table Index: 0 -> Encodes to [4 bits] a; 
Codeword: e768Len/Size = 4/6
DC Amp: ffffffde
Raw word: a000








151/+16 ZEROSRL/Size: 0/10 --> index 10, Val 922 -- > Amp: 922
RL/Size: 0/8 --> index 8, Val 168 -- > Amp: 168
RL/Size: 0/10 --> index 10, Val 723 -- > Amp: 723

Intermediate coding:
Table Index: 151 -> Encodes to [11 bits] 7f9; 
Table Index: 10 -> Encodes to [16 bits] ff83; 
Table Index: 8 -> Encodes to [10 bits] 3f6; 
Table Index: 10 -> Encodes to [16 bits] ff83; 
Table Index: 0 -> Encodes to [4 bits] a; 
Codeword: e77fLen/Size = 4/6
DC Amp: ffffffde
Raw word: ff3fRL/Size = 15/1; [len:11] Skipping amp!
[16] (1, 4) <- 0Raw word: ff83RL/Size = 0/10; [len:16] Amp: 922
[17] (2, 3) <- 922Raw word: fdaaRL/Size = 0/8; [len:10] Amp: 168
[18] (3, 2) <- 168Raw word: ff83RL/Size = 0/10; [len:16] Amp: 723
[19] (4, 1) <- 723Raw word: a000








359, 966, 105, 115, 81, 255, 74, 236, 
809, 205, 186, 939, 498, 763, 483, 326, 
124, 706, 84, 1016, 795, 488, 487, 909, 
886, 346, 302, 611, 563, 927, 201, 922, 
870, 306, 13, 951, 561, 88, 163, 346, 
293, 349, 261, 791, 88, 745, 94, 212, 
427, 178, 205, 198, 667, 692, 84, 529, 
14, 386, 116, 577, 289, 317, 476, 135, 
RL/Size: 0/10 --> index 10, Val 966 -- > Amp: 966
RL/Size: 0/10 --> index 10, Val 809 -- > Amp: 809
RL/Size: 0/7 --> index 7, Val 105 -- > Amp: 105
RL/Size: 0/8 --> index 8, Val 205 -- > Amp: 205
RL/Size: 0/7 --> index 7, Val 124 -- > Amp: 124
RL/Size: 0/7 --> index 7, Val 115 -- > Amp: 115
RL/Size: 0/8 --> index 8, Val 186 -- > Amp: 186
RL/Size: 0/10 --> index 10, Val 706 -- > Amp: 706
RL/Size: 0/10 --> index 10, Val 886 -- > Amp: 886
RL/Size: 0/7 --> index 7, Val 81 -- > Amp: 81
RL/Size: 0/10 --> index 10, Val 939 -- > Amp: 939
RL/Size: 0/7 --> index 7, Val 84 -- > Amp: 84
RL/Size: 0/9 --> index 9, Val 346 -- > Amp: 346
RL/Size: 0/10 --> index 10, Val 870 -- > Amp: 870
RL/Size: 0/8 --> index 8, Val 255 -- > Amp: 255
RL/Size: 0/9 --> index 9, Val 498 -- > Amp: 498
RL/Size: 0/10 --> index 10, Val 1016 -- > Amp: 1016
RL/Size: 0/9 --> index 9, Val 302 -- > Amp: 302
RL/Size: 0/9 --> index 9, Val 306 -- > Amp: 306
RL/Size: 0/9 --> index 9, Val 293 -- > Amp: 293
RL/Size: 0/7 --> index 7, Val 74 -- > Amp: 74
RL/Size: 0/10 --> index 10, Val 763 -- > Amp: 763
RL/Size: 0/10 --> index 10, Val 795 -- > Amp: 795
RL/Size: 0/10 --> index 10, Val 611 -- > Amp: 611
RL/Size: 0/4 --> index 4, Val 13 -- > Amp: 13
RL/Size: 0/9 --> index 9, Val 349 -- > Amp: 349
RL/Size: 0/9 --> index 9, Val 427 -- > Amp: 427
RL/Size: 0/8 --> index 8, Val 236 -- > Amp: 236
RL/Size: 0/9 --> index 9, Val 483 -- > Amp: 483
RL/Size: 0/9 --> index 9, Val 488 -- > Amp: 488
RL/Size: 0/10 --> index 10, Val 563 -- > Amp: 563
RL/Size: 0/10 --> index 10, Val 951 -- > Amp: 951
RL/Size: 0/9 --> index 9, Val 261 -- > Amp: 261
RL/Size: 0/8 --> index 8, Val 178 -- > Amp: 178
RL/Size: 0/4 --> index 4, Val 14 -- > Amp: 14
RL/Size: 0/9 --> index 9, Val 326 -- > Amp: 326
RL/Size: 0/9 --> index 9, Val 487 -- > Amp: 487
RL/Size: 0/10 --> index 10, Val 927 -- > Amp: 927
RL/Size: 0/10 --> index 10, Val 561 -- > Amp: 561
RL/Size: 0/10 --> index 10, Val 791 -- > Amp: 791
RL/Size: 0/8 --> index 8, Val 205 -- > Amp: 205
RL/Size: 0/9 --> index 9, Val 386 -- > Amp: 386
RL/Size: 0/10 --> index 10, Val 909 -- > Amp: 909
RL/Size: 0/8 --> index 8, Val 201 -- > Amp: 201
RL/Size: 0/7 --> index 7, Val 88 -- > Amp: 88
RL/Size: 0/7 --> index 7, Val 88 -- > Amp: 88
RL/Size: 0/8 --> index 8, Val 198 -- > Amp: 198
RL/Size: 0/7 --> index 7, Val 116 -- > Amp: 116
RL/Size: 0/10 --> index 10, Val 922 -- > Amp: 922
RL/Size: 0/8 --> index 8, Val 163 -- > Amp: 163
RL/Size: 0/10 --> index 10, Val 745 -- > Amp: 745
RL/Size: 0/10 --> index 10, Val 667 -- > Amp: 667
RL/Size: 0/10 --> index 10, Val 577 -- > Amp: 577
RL/Size: 0/9 --> index 9, Val 346 -- > Amp: 346
RL/Size: 0/7 --> index 7, Val 94 -- > Amp: 94
RL/Size: 0/10 --> index 10, Val 692 -- > Amp: 692
RL/Size: 0/9 --> index 9, Val 289 -- > Amp: 289
RL/Size: 0/8 --> index 8, Val 212 -- > Amp: 212
RL/Size: 0/7 --> index 7, Val 84 -- > Amp: 84
RL/Size: 0/9 --> index 9, Val 317 -- > Amp: 317
RL/Size: 0/10 --> index 10, Val 529 -- > Amp: 529
RL/Size: 0/9 --> index 9, Val 476 -- > Amp: 476
RL/Size: 0/8 --> index 8, Val 135 -- > Amp: 135

Intermediate coding:
Table Index: 10 -> Encodes to [16 bits] ff83; 
Table Index: 10 -> Encodes to [16 bits] ff83; 
Table Index: 7 -> Encodes to [8 bits] f8; 
Table Index: 8 -> Encodes to [10 bits] 3f6; 
Table Index: 7 -> Encodes to [8 bits] f8; 
Table Index: 7 -> Encodes to [8 bits] f8; 
Table Index: 8 -> Encodes to [10 bits] 3f6; 
Table Index: 10 -> Encodes to [16 bits] ff83; 
Table Index: 10 -> Encodes to [16 bits] ff83; 
Table Index: 7 -> Encodes to [8 bits] f8; 
Table Index: 10 -> Encodes to [16 bits] ff83; 
Table Index: 7 -> Encodes to [8 bits] f8; 
Table Index: 9 -> Encodes to [16 bits] ff82; 
Table Index: 10 -> Encodes to [16 bits] ff83; 
Table Index: 8 -> Encodes to [10 bits] 3f6; 
Table Index: 9 -> Encodes to [16 bits] ff82; 
Table Index: 10 -> Encodes to [16 bits] ff83; 
Table Index: 9 -> Encodes to [16 bits] ff82; 
Table Index: 9 -> Encodes to [16 bits] ff82; 
Table Index: 9 -> Encodes to [16 bits] ff82; 
Table Index: 7 -> Encodes to [8 bits] f8; 
Table Index: 10 -> Encodes to [16 bits] ff83; 
Table Index: 10 -> Encodes to [16 bits] ff83; 
Table Index: 10 -> Encodes to [16 bits] ff83; 
Table Index: 4 -> Encodes to [4 bits] b; 
Table Index: 9 -> Encodes to [16 bits] ff82; 
Table Index: 9 -> Encodes to [16 bits] ff82; 
Table Index: 8 -> Encodes to [10 bits] 3f6; 
Table Index: 9 -> Encodes to [16 bits] ff82; 
Table Index: 9 -> Encodes to [16 bits] ff82; 
Table Index: 10 -> Encodes to [16 bits] ff83; 
Table Index: 10 -> Encodes to [16 bits] ff83; 
Table Index: 9 -> Encodes to [16 bits] ff82; 
Table Index: 8 -> Encodes to [10 bits] 3f6; 
Table Index: 4 -> Encodes to [4 bits] b; 
Table Index: 9 -> Encodes to [16 bits] ff82; 
Table Index: 9 -> Encodes to [16 bits] ff82; 
Table Index: 10 -> Encodes to [16 bits] ff83; 
Table Index: 10 -> Encodes to [16 bits] ff83; 
Table Index: 10 -> Encodes to [16 bits] ff83; 
Table Index: 8 -> Encodes to [10 bits] 3f6; 
Table Index: 9 -> Encodes to [16 bits] ff82; 
Table Index: 10 -> Encodes to [16 bits] ff83; 
Table Index: 8 -> Encodes to [10 bits] 3f6; 
Table Index: 7 -> Encodes to [8 bits] f8; 
Table Index: 7 -> Encodes to [8 bits] f8; 
Table Index: 8 -> Encodes to [10 bits] 3f6; 
Table Index: 7 -> Encodes to [8 bits] f8; 
Table Index: 10 -> Encodes to [16 bits] ff83; 
Table Index: 8 -> Encodes to [10 bits] 3f6; 
Table Index: 10 -> Encodes to [16 bits] ff83; 
Table Index: 10 -> Encodes to [16 bits] ff83; 
Table Index: 10 -> Encodes to [16 bits] ff83; 
Table Index: 9 -> Encodes to [16 bits] ff82; 
Table Index: 7 -> Encodes to [8 bits] f8; 
Table Index: 10 -> Encodes to [16 bits] ff83; 
Table Index: 9 -> Encodes to [16 bits] ff82; 
Table Index: 8 -> Encodes to [10 bits] 3f6; 
Table Index: 7 -> Encodes to [8 bits] f8; 
Table Index: 9 -> Encodes to [16 bits] ff82; 
Table Index: 10 -> Encodes to [16 bits] ff83; 
Table Index: 9 -> Encodes to [16 bits] ff82; 
Table Index: 8 -> Encodes to [10 bits] 3f6; 
Table Index: 0 -> Encodes to [4 bits] a; 
Codeword: f45fLen/Size = 5/7
DC Amp: 45
Raw word: ff83RL/Size = 0/10; [len:16] Amp: 966
[1] (0, 1) <- 966Raw word: ff83RL/Size = 0/10; [len:16] Amp: 809
[2] (1, 0) <- 809Raw word: f8d3RL/Size = 0/7; [len:8] Amp: 105
[3] (0, 2) <- 105Raw word: fdb3RL/Size = 0/8; [len:10] Amp: 205
[4] (1, 1) <- 205Raw word: f8f9RL/Size = 0/7; [len:8] Amp: 124
[5] (2, 0) <- 124Raw word: f8e7RL/Size = 0/7; [len:8] Amp: 115
[6] (0, 3) <- 115Raw word: fdaeRL/Size = 0/8; [len:10] Amp: 186
[7] (1, 2) <- 186Raw word: ff83RL/Size = 0/10; [len:16] Amp: 706
[8] (2, 1) <- 706Raw word: ff83RL/Size = 0/10; [len:16] Amp: 886
[9] (3, 0) <- 886Raw word: f8a3RL/Size = 0/7; [len:8] Amp: 81
[10] (0, 4) <- 81Raw word: ff83RL/Size = 0/10; [len:16] Amp: 939
[11] (1, 3) <- 939Raw word: f8a9RL/Size = 0/7; [len:8] Amp: 84
[12] (2, 2) <- 84Raw word: ff82RL/Size = 0/9; [len:16] Amp: 346
[13] (3, 1) <- 346Raw word: ff83RL/Size = 0/10; [len:16] Amp: 870
[14] (4, 0) <- 870Raw word: fdbfRL/Size = 0/8; [len:10] Amp: 255
[15] (0, 5) <- 255Raw word: ff82RL/Size = 0/9; [len:16] Amp: 498
[16] (1, 4) <- 498Raw word: ff83RL/Size = 0/10; [len:16] Amp: 1016
[17] (2, 3) <- 1016Raw word: ff82RL/Size = 0/9; [len:16] Amp: 302
[18] (3, 2) <- 302Raw word: ff82RL/Size = 0/9; [len:16] Amp: 306
[19] (4, 1) <- 306Raw word: ff82RL/Size = 0/9; [len:16] Amp: 293
[20] (5, 0) <- 293Raw word: f895RL/Size = 0/7; [len:8] Amp: 74
[21] (0, 6) <- 74Raw word: ff83RL/Size = 0/10; [len:16] Amp: 763
[22] (1, 5) <- 763Raw word: ff83RL/Size = 0/10; [len:16] Amp: 795
[23] (2, 4) <- 795Raw word: ff83RL/Size = 0/10; [len:16] Amp: 611
[24] (3, 3) <- 611Raw word: bdffRL/Size = 0/4; [len:4] Amp: 13
[25] (4, 2) <- 13Raw word: ff82RL/Size = 0/9; [len:16] Amp: 349
[26] (5, 1) <- 349Raw word: ff82RL/Size = 0/9; [len:16] Amp: 427
[27] (6, 0) <- 427Raw word: fdbbRL/Size = 0/8; [len:10] Amp: 236
[28] (0, 7) <- 236Raw word: ff82RL/Size = 0/9; [len:16] Amp: 483
[29] (1, 6) <- 483Raw word: ff82RL/Size = 0/9; [len:16] Amp: 488
[30] (2, 5) <- 488Raw word: ff83RL/Size = 0/10; [len:16] Amp: 563
[31] (3, 4) <- 563Raw word: ff83RL/Size = 0/10; [len:16] Amp: 951
[32] (4, 3) <- 951Raw word: ff82RL/Size = 0/9; [len:16] Amp: 261
[33] (5, 2) <- 261Raw word: fdacRL/Size = 0/8; [len:10] Amp: 178
[34] (6, 1) <- 178Raw word: beffRL/Size = 0/4; [len:4] Amp: 14
[35] (7, 0) <- 14Raw word: ff82RL/Size = 0/9; [len:16] Amp: 326
[36] (1, 7) <- 326Raw word: ff82RL/Size = 0/9; [len:16] Amp: 487
[37] (2, 6) <- 487Raw word: ff83RL/Size = 0/10; [len:16] Amp: 927
[38] (3, 5) <- 927Raw word: ff83RL/Size = 0/10; [len:16] Amp: 561
[39] (4, 4) <- 561Raw word: ff83RL/Size = 0/10; [len:16] Amp: 791
[40] (5, 3) <- 791Raw word: fdb3RL/Size = 0/8; [len:10] Amp: 205
[41] (6, 2) <- 205Raw word: ff82RL/Size = 0/9; [len:16] Amp: 386
[42] (7, 1) <- 386Raw word: ff83RL/Size = 0/10; [len:16] Amp: 909
[43] (2, 7) <- 909Raw word: fdb2RL/Size = 0/8; [len:10] Amp: 201
[44] (3, 6) <- 201Raw word: f8b1RL/Size = 0/7; [len:8] Amp: 88
[45] (4, 5) <- 88Raw word: f8b1RL/Size = 0/7; [len:8] Amp: 88
[46] (5, 4) <- 88Raw word: fdb1RL/Size = 0/8; [len:10] Amp: 198
[47] (6, 3) <- 198Raw word: f8e9RL/Size = 0/7; [len:8] Amp: 116
[48] (7, 2) <- 116Raw word: ff83RL/Size = 0/10; [len:16] Amp: 922
[49] (3, 7) <- 922Raw word: fda8RL/Size = 0/8; [len:10] Amp: 163
[50] (4, 6) <- 163Raw word: ff93RL/Size = 3/8; [len:16] Amp: 186
[54] (4, 7) <- 186Raw word: 7fe0RL/Size = 0/2; [len:2] Amp: 3
[55] (5, 6) <- 3Raw word: fe0eRL/Size = 4/2; [len:10] Amp: -3
[60] (7, 5) <- -3Raw word: e9bfRL/Size = 3/1; [len:6] Amp: -1
[64] (255, 0) <- -1Raw word: dff8RL/Size = 1/2; [len:5] Amp: 3
[66] (9, 1) <- 3Raw word: fc01RL/Size = 8/1; [len:9] Amp: -1
[75] (27, 1) <- -1Raw word: 670RL/Size = 0/1; [len:2] Amp: -1
[76] (28, 2) <- -1Raw word: 3380RL/Size = 0/1; [len:2] Amp: 1
[77] (29, 3) <- 1Raw word: 9c00RL/Size = 0/3; [len:3] Amp: 7
[78] (30, 4) <- 7Raw word: 0RL/Size = 0/1; [len:2] Amp: -1
[79] (34, 0) <- -1Raw word: 0RL/Size = 0/1; [len:2] Amp: -1
[80] (35, 1) <- -1Raw word: 0RL/Size = 0/1; [len:2] Amp: -1
[81] (36, 2) <- -1Raw word: 7RL/Size = 0/1; [len:2] Amp: -1
[82] (37, 3) <- -1Raw word: 3cRL/Size = 0/1; [len:2] Amp: -1
[83] (38, 4) <- -1Raw word: 1e3RL/Size = 0/1; [len:2] Amp: -1
[84] (39, 5) <- -1Raw word: f18RL/Size = 0/1; [len:2] Amp: -1
[85] (40, 0) <- -1Raw word: 78c0RL/Size = 0/2; [len:2] Amp: 3
[86] (43, 1) <- 3Raw word: 8c00RL/Size = 0/3; [len:3] Amp: -4
[87] (44, 2) <- -4Raw word: 0RL/Size = 0/1; [len:2] Amp: -1
[88] (45, 3) <- -1Raw word: 0RL/Size = 0/1; [len:2] Amp: -1
[89] (46, 4) <- -1Raw word: 0RL/Size = 0/1; [len:2] Amp: -1
[90] (47, 5) <- -1Raw word: 0RL/Size = 0/1; [len:2] Amp: -1
[91] (48, 6) <- -1Raw word: 3RL/Size = 0/1; [len:2] Amp: -1
[92] (49, 0) <- -1Raw word: 1aRL/Size = 0/1; [len:2] Amp: -1
[93] (50, 1) <- -1Raw word: d2RL/Size = 0/1; [len:2] Amp: -1
[94] (53, 2) <- -1Raw word: 690RL/Size = 0/1; [len:2] Amp: -1
[95] (54, 3) <- -1Raw word: 3480RL/Size = 0/1; [len:2] Amp: 1
[96] (55, 4) <- 1Raw word: a400
Test failed!



Test failed!
Test failed!Test failed!Test failed!
Test failed!Test failed!Test failed!Test failed!
Test failed!Test failed!Test failed!Test failed!Test failed!
Test done!